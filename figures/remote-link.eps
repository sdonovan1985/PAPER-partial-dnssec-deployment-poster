%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 226 259
%%Creator: yExport 1.4.0.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Wednesday, April 29, 2015 3:59:45 PM EDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
226 259 setpagesize
0 0 0 0 setmargins
0 0 setorigin
226 259 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
226.000 0.00000 l
226.000 259.000 l
0.00000 259.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 226 259 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -204.000 -159.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
204.000 159.000 m
430.000 159.000 l
430.000 418.000 l
204.000 418.000 l
204.000 159.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -204.000 -159.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -204.000 -159.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -204.000 -159.000 ] defaultmatrix matrix concatmatrix setmatrix
q
[ 40.0000 0.00000 0.00000 48.0000 267.375 196.194 ] concat
<<
/ImageType 1
/Width 40  /Height 48
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [40 0 0 48 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
GauI778GI-(l!M`)\No;#V-0+YTQ2_LB,.XE"0VfG8]2lh;-n0(;RIVk.>^^_q[9.LH`0_SY#-3mj\(t
ICnXn0AGUaq>'sdI"-WqH$O[]H?s[T[&9h"USFT`WN!J?]!AWI]Y(na['ZX)Uo:5jWiCrFqYL'Nk%:'A
N/Z!+c>IH7>[C`cI!khsiSX5%q0@I>%u=<`qtn";]/r)9!O]>C)3%)e2E!H+\[Js?41ClU+?r(T0/"t+
-RUDp.jH8`/M/P#,pbQ33Ai\%Ycs3c#6tLkqnUQjAnHdQLBe%hJbJg2lGZIi8kMcNN/s$\NK'ctWDMf6
LPOpMj36TAk!hj27n#kS\$lGsR7rS3s5Z'p1q^K6!$sBgP36b)GtM2u1JD\Bgsss*f@Mr<1c.'I-/#=8
QhuYt$K<j,M%#`CcHa^gAUqXoIWBIlP[7Ho=B\m;'6,fe2b/@bNIcW]?>47nD/!]m6SW*!'5jUaFHm^_
)]OF8ZEgdL]tLna\%0&[]"1KR\3-L:]=Y\-K7fAOPIJ"[r>2DO(Ddm5OZg4^[C*WYb:Yb<5!D+m]stS^
]"5J`\[fDeA`#X54?PekEkODu]=U-GZ#//:1d3r]&h\/@!aD-#p[IZk0Gh5O/hV$ZDI-XUXLl;VTM'BF
D/BaA^:C3*;La+C9f(KjA>32!o^qdc\@AcI0OJ0oS(s[0+I7j1.k<,[*LT0iPg!b`R%jEPH+L\qZbn3T
$lb9IqSk?I5Kj`\B"__,GS_AF!HN7&;%NP/It)rg_^:_hA_3-'%"T.["JAF^9Me<aGl#Hc5<hAq:d(-b
+<P^adQeJ4l.(J,*ZhJ@bKB+e%1*?W6.Bs)/?r6YO,o>:2`NcV4$-Y0QXgjt:s\h,oYfXdEHQE3j<AT4
\EkmA>co7PZm6u>bG2kg5e,T_ij,Q6E$HPN&eYgRrf`NZR\BZ7o--6tM<5P/>hct"mU2Y;]1KMg+n+"3
eDM74"hl+F6jJO#aQ!ZL33pbI'L.c%C^g]r_C<#F/ub'9F!6>J&;S,f/H#i&is!9b$g+2Y;-dHJWPue2
?G]nB&\A-"7gW%)XscCkBHn_3Bi/QM^:oWr+Qgm+2(0ipCul&a7t`2[)8"uo,0.Wgl'2MsTcf45&-nOf
n1F%cfj+;si6"ibIRJ,=.a`3,XP_>&Ab_CMOVek57JH!qb"i.,Ob?+<W,Q+f7CYIS!BAdhFr#mf<j*GL
Qeb&UW6&\TJ>iL)?<M=E6rD:,;D0Y$Xe&08lG^^be8tFW"'rG'5ttVT:_tbA4IWd-7]PO43HhogO!ZLP
C:O$Z7hoPj1c1Gh2S"2_X63APC>%PM"9bBl5g^YV'5aO.bq_(2Z&G';(kmm6C>ttpQJCKZ@Y.tsE^&K?
@O"1s`/iuc:cTUpa]SW"+9Fd,j:N:_[`(:Z`c_C)(G+i$QGi-pG.9$%M`W?M,=]V7M'!<@fsEj`nKPjo
XE)*hYV]DYLf)W!%W8p*#:MUCa;Kj9.d&%b"4K[Y@TrU?YE2pE&4a(t,A%I%i$p@cD(ZY:2+q;1Ahr>P
AAYgi$LKQl.mIK&F9#$SFECLU&K-;Y1G2flbOZ>>pKKkFo(;Rm,M_7i+#,cjr.poeCp9A@_D'<]cK&*'
5X>\Jp%;<NM];6_"H378LTL.jkQ\$-)R1)\9pPN*h^To=:\78hU^GeOM+d:$_Bi8@ECkUb\82CE>S7.4
q`0uK>.JJ:T6'g%Ps59!F3tab>_GNlQi:d[,&R[<9eIA&CS1^KPM^D?7\_:_l:3a9EA8Kbli$cfq2:E\
Y+1YkEm\3q>c%e0_-eD+n/[b6rnk&#Df;ST*&-K<M1Ti*AUH`BY+#e3]jWPW)q'U7U8oW)aX6!hAj)-B
~>
Q
0 J
1.45000 M
newpath
241.370 187.662 m
241.370 179.910 l
238.294 179.910 l
238.294 178.990 l
245.677 178.990 l
245.677 179.910 l
242.601 179.910 l
242.601 187.662 l
h
246.931 187.662 m
246.931 181.299 l
248.085 181.299 l
248.085 182.494 l
248.542 181.604 249.206 181.158 250.077 181.158  c
250.194 181.158 250.317 181.168 250.446 181.188  c
250.446 182.266 l
250.247 182.199 250.071 182.166 249.919 182.166  c
249.188 182.166 248.577 182.600 248.085 183.467  c
248.085 187.662 l
h
255.819 187.662 m
255.819 186.467 l
255.206 187.361 254.462 187.809 253.587 187.809  c
253.032 187.809 252.591 187.634 252.263 187.284  c
251.935 186.935 251.771 186.463 251.771 185.869  c
251.771 181.299 l
252.925 181.299 l
252.925 185.494 l
252.925 185.971 252.994 186.310 253.133 186.511  c
253.271 186.712 253.503 186.813 253.827 186.813  c
254.530 186.813 255.194 186.350 255.819 185.424  c
255.819 181.299 l
256.974 181.299 l
256.974 187.662 l
h
260.976 187.809 m
260.448 187.809 259.808 187.686 259.054 187.440  c
259.054 186.379 l
259.808 186.754 260.464 186.942 261.022 186.942  c
261.354 186.942 261.630 186.852 261.849 186.672  c
262.067 186.492 262.177 186.268 262.177 185.998  c
262.177 185.604 261.870 185.277 261.257 185.020  c
260.583 184.733 l
259.587 184.318 259.089 183.723 259.089 182.945  c
259.089 182.391 259.285 181.954 259.678 181.636  c
260.070 181.318 260.608 181.158 261.292 181.158  c
261.647 181.158 262.087 181.207 262.610 181.305  c
262.851 181.352 l
262.851 182.313 l
262.206 182.121 261.694 182.026 261.315 182.026  c
260.573 182.026 260.202 182.295 260.202 182.834  c
260.202 183.182 260.483 183.475 261.046 183.713  c
261.603 183.947 l
262.231 184.213 262.677 184.493 262.938 184.788  c
263.200 185.083 263.331 185.451 263.331 185.893  c
263.331 186.451 263.110 186.910 262.669 187.270  c
262.228 187.629 261.663 187.809 260.976 187.809  c
h
267.315 187.809 m
266.729 187.809 266.272 187.641 265.944 187.305  c
265.616 186.969 265.452 186.502 265.452 185.904  c
265.452 182.166 l
264.655 182.166 l
264.655 181.299 l
265.452 181.299 l
265.452 180.145 l
266.606 180.033 l
266.606 181.299 l
268.271 181.299 l
268.271 182.166 l
266.606 182.166 l
266.606 185.693 l
266.606 186.526 266.966 186.942 267.685 186.942  c
267.837 186.942 268.022 186.916 268.241 186.865  c
268.241 187.662 l
267.886 187.760 267.577 187.809 267.315 187.809  c
h
274.558 187.457 m
273.784 187.692 273.122 187.809 272.571 187.809  c
271.634 187.809 270.869 187.497 270.277 186.874  c
269.686 186.251 269.390 185.443 269.390 184.451  c
269.390 183.486 269.650 182.695 270.172 182.078  c
270.693 181.461 271.360 181.152 272.173 181.152  c
272.942 181.152 273.537 181.426 273.957 181.973  c
274.377 182.520 274.587 183.297 274.587 184.305  c
274.581 184.662 l
270.567 184.662 l
270.735 186.174 271.476 186.930 272.788 186.930  c
273.269 186.930 273.858 186.801 274.558 186.543  c
h
270.620 183.795 m
273.427 183.795 l
273.427 182.611 272.985 182.020 272.103 182.020  c
271.216 182.020 270.722 182.611 270.620 183.795  c
h
280.663 187.662 m
280.663 186.467 l
280.194 187.361 279.487 187.809 278.542 187.809  c
277.776 187.809 277.174 187.529 276.734 186.971  c
276.295 186.412 276.075 185.649 276.075 184.680  c
276.075 183.621 276.324 182.770 276.822 182.125  c
277.320 181.481 277.976 181.158 278.788 181.158  c
279.542 181.158 280.167 181.447 280.663 182.026  c
280.663 178.410 l
281.823 178.410 l
281.823 187.662 l
h
280.663 182.817 m
280.065 182.289 279.499 182.026 278.964 182.026  c
277.858 182.026 277.306 182.871 277.306 184.563  c
277.306 186.051 277.798 186.795 278.782 186.795  c
279.423 186.795 280.050 186.445 280.663 185.746  c
h
287.894 187.662 m
287.894 178.990 l
290.519 178.990 l
291.351 178.990 291.988 179.174 292.432 179.541  c
292.875 179.908 293.097 180.442 293.097 181.141  c
293.097 182.297 292.513 183.117 291.345 183.602  c
294.239 187.662 l
292.728 187.662 l
290.261 183.994 l
289.112 183.994 l
289.112 187.662 l
h
289.112 183.074 m
289.511 183.074 l
291.058 183.074 291.831 182.467 291.831 181.252  c
291.831 180.358 291.183 179.910 289.886 179.910  c
289.112 179.910 l
h
300.181 187.457 m
299.407 187.692 298.745 187.809 298.194 187.809  c
297.257 187.809 296.492 187.497 295.900 186.874  c
295.309 186.251 295.013 185.443 295.013 184.451  c
295.013 183.486 295.273 182.695 295.795 182.078  c
296.316 181.461 296.983 181.152 297.796 181.152  c
298.565 181.152 299.160 181.426 299.580 181.973  c
300.000 182.520 300.210 183.297 300.210 184.305  c
300.204 184.662 l
296.190 184.662 l
296.358 186.174 297.099 186.930 298.411 186.930  c
298.892 186.930 299.481 186.801 300.181 186.543  c
h
296.243 183.795 m
299.050 183.795 l
299.050 182.611 298.608 182.020 297.726 182.020  c
296.839 182.020 296.345 182.611 296.243 183.795  c
h
303.890 187.809 m
303.362 187.809 302.722 187.686 301.968 187.440  c
301.968 186.379 l
302.722 186.754 303.378 186.942 303.937 186.942  c
304.269 186.942 304.544 186.852 304.763 186.672  c
304.981 186.492 305.091 186.268 305.091 185.998  c
305.091 185.604 304.784 185.277 304.171 185.020  c
303.497 184.733 l
302.501 184.318 302.003 183.723 302.003 182.945  c
302.003 182.391 302.199 181.954 302.592 181.636  c
302.984 181.318 303.522 181.158 304.206 181.158  c
304.562 181.158 305.001 181.207 305.524 181.305  c
305.765 181.352 l
305.765 182.313 l
305.120 182.121 304.608 182.026 304.229 182.026  c
303.487 182.026 303.116 182.295 303.116 182.834  c
303.116 183.182 303.397 183.475 303.960 183.713  c
304.517 183.947 l
305.146 184.213 305.591 184.493 305.853 184.788  c
306.114 185.083 306.245 185.451 306.245 185.893  c
306.245 186.451 306.024 186.910 305.583 187.270  c
305.142 187.629 304.577 187.809 303.890 187.809  c
h
310.810 187.809 m
309.899 187.809 309.173 187.507 308.630 186.903  c
308.087 186.300 307.815 185.492 307.815 184.481  c
307.815 183.457 308.088 182.648 308.633 182.052  c
309.178 181.456 309.917 181.158 310.851 181.158  c
311.784 181.158 312.523 181.456 313.068 182.052  c
313.613 182.648 313.886 183.453 313.886 184.469  c
313.886 185.508 313.612 186.324 313.065 186.918  c
312.519 187.512 311.767 187.809 310.810 187.809  c
h
310.827 186.942 m
312.050 186.942 312.661 186.117 312.661 184.469  c
312.661 182.840 312.058 182.026 310.851 182.026  c
309.647 182.026 309.046 182.844 309.046 184.481  c
309.046 186.121 309.640 186.942 310.827 186.942  c
h
315.690 187.662 m
315.690 178.410 l
316.845 178.410 l
316.845 187.662 l
h
320.478 187.662 m
318.110 181.299 l
319.265 181.299 l
321.116 186.250 l
323.067 181.299 l
324.146 181.299 l
321.632 187.662 l
h
330.034 187.457 m
329.261 187.692 328.599 187.809 328.048 187.809  c
327.110 187.809 326.346 187.497 325.754 186.874  c
325.162 186.251 324.866 185.443 324.866 184.451  c
324.866 183.486 325.127 182.695 325.648 182.078  c
326.170 181.461 326.837 181.152 327.649 181.152  c
328.419 181.152 329.014 181.426 329.434 181.973  c
329.854 182.520 330.063 183.297 330.063 184.305  c
330.058 184.662 l
326.044 184.662 l
326.212 186.174 326.952 186.930 328.265 186.930  c
328.745 186.930 329.335 186.801 330.034 186.543  c
h
326.097 183.795 m
328.903 183.795 l
328.903 182.611 328.462 182.020 327.579 182.020  c
326.692 182.020 326.198 182.611 326.097 183.795  c
h
332.056 187.662 m
332.056 181.299 l
333.210 181.299 l
333.210 182.494 l
333.667 181.604 334.331 181.158 335.202 181.158  c
335.319 181.158 335.442 181.168 335.571 181.188  c
335.571 182.266 l
335.372 182.199 335.196 182.166 335.044 182.166  c
334.313 182.166 333.702 182.600 333.210 183.467  c
333.210 187.662 l
h
f
2 J
10.0000 M
q
[ 40.0000 0.00000 0.00000 47.0000 267.236 327.556 ] concat
<<
/ImageType 1
/Width 40  /Height 47
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/ImageMatrix [40 0 0 47 0 0]
/DataSource currentfile /ASCII85Decode filter /FlateDecode filter 
>> image
GauJ"M-!k^*XD1aCsJGj-Cm&c:7@bJ1=N%iACBPG9p=g5CuT!)VFG&igip^hMP(6bTVA*hJ>fQT5'Gdm
8!YMF+S^2*0%)_&9FNb"hYE^dn:Bc?IGB1aquG[J7q@[fi.St6k1THqqKTb1f!;RP656R6K^NjYG@u<\
EBL]Xh)EBF?aC^u*+p_@=iPSJj1AMs]i=7iPU7Z]7VomdOWiU)r:ei=OIKR.D;K20maXoB2&l(#ENE%P
rGcDHHjP;8(ja76QHf_q]/RaV01YA1C"=r9QHOpC^CM/7p)20Mkg+D;r^tSpUmkPRSLS8'[@d7:&WMB>
F/E5;ZtuS.'WHC]Z<6PJ:<fEce7Vsorm[`+hl3KhJ\AVs[O@dkTM,0O];HS^n(#PFH1maiNIcQ=s3JC)
182N0JqJLS(bu0(M<rai[dI3rUl8g\U0h!=0Q:mnS4bYj&ITF1B1@jW^"QH!ZoIK?<9(_@XO$^&>(PuO
a*qgR"Pl]beSR@q+q?:Y,]jo)^p8M_'[0s8lMr_SAe$+6/Lcu/8^kV)Q-g(UUe-MH/I.mT!`'U1AUNCq
H1+,'VeX%P^$)S*p9b2)]pjR]AS=bkO)&qdON<4bmumr[KYD38'=t%#er!W-8'Q)<SuS!kRo$qB1QfTq
QJl4SGKpL1>[YYU<kUcZ"7(CY#ln*>-pp67"r\KFE1l(hL'TJ&Z=ir7Mj%A]N6K&OmRaTi8Y.e'AVfL(
QdS.6A@k=h\OJBIldl'<B(OCJ9=t$_7K:\Bo@%tdcXq+tM(N/8%5/mrB4M$@&Hn!<>?i1DC-rk]OAP`$
)t&pj9hq1$.ItQDV;Rm^0Dn5@NS6#pRU5</2INVRGLZu3FY!G<;4qbhga1e@<C@'k]0i"i9p]B-;tK5P
JqI<IP)E(UhFY"i@*f1jojjDLm*K9H<VtI;.8ABpmoBc?AP:ter'3I6_eI-tmKeso1Srb?@`"G!KOlNX
&O=_[_>TCRk3m=e&e;>umT60lJm=&,3:<&?9@\VAIs8b91q.kXS\LZMAdnpU2[4EFh>81)5q^tuR/:<e
/<M.U7a\m+W&X'kbJFU,iDRhIKj3ag*GP`nKuj_k;Y<ZG6C6uTjt0.(K5/-:YWlLgjmR4dd"@kLIa*%@
lo2_%J73P:87+PlRE(-$>\KBl+3uo!G,tVp+M72Bs2-Zs`HT!tp,0#W];6*1TAWUA=gp]*#L`fZ,r<7S
UZgl.k)\9I^TWoOeu^E5Rib=-F1Ld3Rf`R\f-RCCE&8@J`cTs)\7O4B+`pf3fcO!lDU\:9%NcAo\MIhI
@DXddYd3pbbC"NXoP(oMcB__+Bp)ife(eN'b,9+L!a"-Fs"G7^qdA3Bb9K!MY#112>ENWaJ;YV<8%DlT
gTi:3e7#!ZK<7C.l:oI8Bb;-,eJ]2>*u')RFR6+hP06s*i_:N@"mC,c]W`GsYh-%QlZ>eUb4_3?QY0*N
4IL!g]Q0-e'JMt+,mnHC@#k>1(LXkjEH$Y6Nona#CJX.b$>f6(,W;=2bP;'af'i9/q_r?3^S]fZU*,t-
<)mbOR,m"#6J&s(6bn7g6DQ6(/HdF137rg['d/jujJX@\TI53]^2`AfX9A*acVl5`2o"[-Fm)jX(#ZC!
7<?ZIg\JH8'>(ZkE?F`K"h=_+ESUFr?^IPgQYOar]g^DBi-moVCYQf!G@@hAO*g/G7-!/&6bVgh[s>Xe
GMEOpNjlM?GGq.Y>*B*Q:aRgfBMUS.cZWu^].\irr*=Q0U4']_d;rU)pD`4uCKSpg7Ga[6Pa9S8*Ms!H
LMm0QrB_THQ#=8mmX2GW/BE7=calrcch61+45g0JX)b4@qGEIS%`<7HD1T6:[T,%-%hG(Wc6J\a%+pP3
G04G<<sNgh1s4_Z3*e39AloSM!<10Z8_^!hqi>gD8tN'j(*Ah]p=`<PNZY.'7iW4t`T8/c@6hJ,-iL\Z
F,slbT=.hH@>B9RD&NK=oCZPPQp/X!rh<31jT<Jk*`b`,V*Th[3%X`$K^PEhGLIa:a*UhaKAp=1X"MP`
HZ7Hg/bX:CIJqU0Ql82X$S[WLYh&<J&shYC3kE\5HS4fm%10b$i&cG9Vhk:icNQ-E%AZ"Id>*OQH,S5!
0Jtgq)/^2bDmHUVY2@Z1:T"=;LMt)%>'''UTo=8PZpmT5oK\?9/=%#VESujicd"M_P'qm!cR=5+75P1[
XY*cCfBjMr5!Rs/aol.1,2[YLT,KSa)r>GH3cs+fZ2@o&Je$mK;;?ncBL-O.VE"!>CPB;UIB"^`e()NI
+mpbAC6Z`qh5se=oPDJSEk@Tn'APGQI\p8>O4u!Cl21'l(Z(cC\IEp#!8t`gRKUpZIJT/`qTZn4@;YSG
3-s)fc9Q.\>RF!fkYHm]K%,,+$q6gii$k(9*-ZlF`sQrnV6S0C]QFm#Bd3t/@dht<PK/_P3b&\ujR2(Y
R[CQ0-B/<YP2oeF4>]32gRk``\6*>Q,C*$d@+c!B?;fu1-%8bO,F*_p(a>JI!`-NBq@?`pGRa~>
Q
0 J
1.45000 M
newpath
246.696 392.046 m
246.696 383.374 l
247.927 383.374 l
247.927 391.126 l
251.829 391.126 l
251.829 392.046 l
h
255.620 392.192 m
254.710 392.192 253.983 391.890 253.440 391.287  c
252.897 390.683 252.626 389.876 252.626 388.864  c
252.626 387.840 252.898 387.031 253.443 386.435  c
253.988 385.840 254.728 385.542 255.661 385.542  c
256.595 385.542 257.334 385.840 257.879 386.435  c
258.424 387.031 258.696 387.837 258.696 388.852  c
258.696 389.891 258.423 390.708 257.876 391.301  c
257.329 391.895 256.577 392.192 255.620 392.192  c
h
255.638 391.325 m
256.860 391.325 257.472 390.501 257.472 388.852  c
257.472 387.223 256.868 386.409 255.661 386.409  c
254.458 386.409 253.856 387.227 253.856 388.864  c
253.856 390.505 254.450 391.325 255.638 391.325  c
h
262.985 392.192 m
262.126 392.192 261.413 391.874 260.847 391.237  c
260.280 390.600 259.997 389.798 259.997 388.829  c
259.997 387.794 260.277 386.987 260.838 386.409  c
261.398 385.831 262.181 385.542 263.185 385.542  c
263.681 385.542 264.235 385.610 264.849 385.747  c
264.849 386.714 l
264.196 386.522 263.665 386.426 263.255 386.426  c
262.665 386.426 262.191 386.648 261.834 387.091  c
261.477 387.535 261.298 388.126 261.298 388.864  c
261.298 389.579 261.481 390.157 261.849 390.598  c
262.216 391.040 262.696 391.260 263.290 391.260  c
263.817 391.260 264.360 391.126 264.919 390.856  c
264.919 391.852 l
264.173 392.079 263.528 392.192 262.985 392.192  c
h
269.929 391.237 m
269.237 391.874 268.571 392.192 267.931 392.192  c
267.403 392.192 266.966 392.027 266.618 391.697  c
266.271 391.367 266.097 390.950 266.097 390.446  c
266.097 389.751 266.389 389.216 266.973 388.843  c
267.557 388.470 268.394 388.284 269.483 388.284  c
269.759 388.284 l
269.759 387.516 l
269.759 386.778 269.380 386.409 268.622 386.409  c
268.013 386.409 267.354 386.596 266.647 386.971  c
266.647 386.016 l
267.425 385.700 268.153 385.542 268.833 385.542  c
269.544 385.542 270.068 385.702 270.406 386.022  c
270.744 386.342 270.913 386.840 270.913 387.516  c
270.913 390.399 l
270.913 391.059 271.116 391.389 271.522 391.389  c
271.573 391.389 271.647 391.382 271.745 391.366  c
271.827 392.005 l
271.565 392.130 271.276 392.192 270.960 392.192  c
270.421 392.192 270.077 391.874 269.929 391.237  c
h
269.759 390.610 m
269.759 388.964 l
269.372 388.952 l
268.739 388.952 268.228 389.072 267.837 389.312  c
267.446 389.552 267.251 389.868 267.251 390.258  c
267.251 390.536 267.349 390.770 267.544 390.962  c
267.739 391.153 267.978 391.249 268.259 391.249  c
268.739 391.249 269.239 391.036 269.759 390.610  c
h
273.274 392.046 m
273.274 382.794 l
274.429 382.794 l
274.429 392.046 l
h
280.505 392.046 m
280.505 383.374 l
283.130 383.374 l
283.962 383.374 284.600 383.557 285.043 383.924  c
285.486 384.292 285.708 384.825 285.708 385.524  c
285.708 386.680 285.124 387.501 283.956 387.985  c
286.851 392.046 l
285.339 392.046 l
282.872 388.378 l
281.724 388.378 l
281.724 392.046 l
h
281.724 387.458 m
282.122 387.458 l
283.669 387.458 284.442 386.850 284.442 385.635  c
284.442 384.741 283.794 384.294 282.497 384.294  c
281.724 384.294 l
h
292.792 391.840 m
292.019 392.075 291.356 392.192 290.806 392.192  c
289.868 392.192 289.104 391.881 288.512 391.257  c
287.920 390.634 287.624 389.827 287.624 388.835  c
287.624 387.870 287.885 387.079 288.406 386.462  c
288.928 385.844 289.595 385.536 290.407 385.536  c
291.177 385.536 291.771 385.809 292.191 386.356  c
292.611 386.903 292.821 387.680 292.821 388.688  c
292.815 389.046 l
288.802 389.046 l
288.970 390.557 289.710 391.313 291.022 391.313  c
291.503 391.313 292.093 391.184 292.792 390.926  c
h
288.854 388.178 m
291.661 388.178 l
291.661 386.995 291.220 386.403 290.337 386.403  c
289.450 386.403 288.956 386.995 288.854 388.178  c
h
296.501 392.192 m
295.974 392.192 295.333 392.069 294.579 391.823  c
294.579 390.762 l
295.333 391.137 295.989 391.325 296.548 391.325  c
296.880 391.325 297.155 391.235 297.374 391.055  c
297.593 390.876 297.702 390.651 297.702 390.382  c
297.702 389.987 297.396 389.661 296.782 389.403  c
296.108 389.116 l
295.112 388.702 294.614 388.106 294.614 387.329  c
294.614 386.774 294.811 386.338 295.203 386.019  c
295.596 385.701 296.134 385.542 296.817 385.542  c
297.173 385.542 297.612 385.590 298.136 385.688  c
298.376 385.735 l
298.376 386.696 l
297.731 386.505 297.220 386.409 296.841 386.409  c
296.099 386.409 295.728 386.678 295.728 387.217  c
295.728 387.565 296.009 387.858 296.571 388.096  c
297.128 388.331 l
297.757 388.596 298.202 388.877 298.464 389.172  c
298.726 389.466 298.856 389.835 298.856 390.276  c
298.856 390.835 298.636 391.294 298.194 391.653  c
297.753 392.012 297.188 392.192 296.501 392.192  c
h
303.421 392.192 m
302.511 392.192 301.784 391.890 301.241 391.287  c
300.698 390.683 300.427 389.876 300.427 388.864  c
300.427 387.840 300.699 387.031 301.244 386.435  c
301.789 385.840 302.528 385.542 303.462 385.542  c
304.396 385.542 305.135 385.840 305.680 386.435  c
306.225 387.031 306.497 387.837 306.497 388.852  c
306.497 389.891 306.224 390.708 305.677 391.301  c
305.130 391.895 304.378 392.192 303.421 392.192  c
h
303.438 391.325 m
304.661 391.325 305.272 390.501 305.272 388.852  c
305.272 387.223 304.669 386.409 303.462 386.409  c
302.259 386.409 301.657 387.227 301.657 388.864  c
301.657 390.505 302.251 391.325 303.438 391.325  c
h
308.302 392.046 m
308.302 382.794 l
309.456 382.794 l
309.456 392.046 l
h
313.089 392.046 m
310.722 385.682 l
311.876 385.682 l
313.728 390.633 l
315.679 385.682 l
316.757 385.682 l
314.243 392.046 l
h
322.646 391.840 m
321.872 392.075 321.210 392.192 320.659 392.192  c
319.722 392.192 318.957 391.881 318.365 391.257  c
317.773 390.634 317.478 389.827 317.478 388.835  c
317.478 387.870 317.738 387.079 318.260 386.462  c
318.781 385.844 319.448 385.536 320.261 385.536  c
321.030 385.536 321.625 385.809 322.045 386.356  c
322.465 386.903 322.675 387.680 322.675 388.688  c
322.669 389.046 l
318.655 389.046 l
318.823 390.557 319.563 391.313 320.876 391.313  c
321.356 391.313 321.946 391.184 322.646 390.926  c
h
318.708 388.178 m
321.515 388.178 l
321.515 386.995 321.073 386.403 320.190 386.403  c
319.304 386.403 318.810 386.995 318.708 388.178  c
h
324.667 392.046 m
324.667 385.682 l
325.821 385.682 l
325.821 386.878 l
326.278 385.987 326.942 385.542 327.813 385.542  c
327.931 385.542 328.054 385.551 328.183 385.571  c
328.183 386.649 l
327.983 386.583 327.808 386.549 327.655 386.549  c
326.925 386.549 326.313 386.983 325.821 387.850  c
325.821 392.046 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
368.925 292.336 m
368.925 283.664 l
370.155 283.664 l
370.155 291.416 l
374.058 291.416 l
374.058 292.336 l
h
377.849 292.482 m
376.938 292.482 376.212 292.181 375.669 291.577  c
375.126 290.974 374.854 290.166 374.854 289.154  c
374.854 288.131 375.127 287.321 375.672 286.726  c
376.217 286.130 376.956 285.832 377.890 285.832  c
378.823 285.832 379.562 286.130 380.107 286.726  c
380.652 287.321 380.925 288.127 380.925 289.143  c
380.925 290.182 380.651 290.998 380.104 291.592  c
379.558 292.186 378.806 292.482 377.849 292.482  c
h
377.866 291.615 m
379.089 291.615 379.700 290.791 379.700 289.143  c
379.700 287.514 379.097 286.699 377.890 286.699  c
376.687 286.699 376.085 287.518 376.085 289.154  c
376.085 290.795 376.679 291.615 377.866 291.615  c
h
385.214 292.482 m
384.354 292.482 383.642 292.164 383.075 291.527  c
382.509 290.891 382.226 290.088 382.226 289.119  c
382.226 288.084 382.506 287.277 383.066 286.699  c
383.627 286.121 384.409 285.832 385.413 285.832  c
385.909 285.832 386.464 285.900 387.077 286.037  c
387.077 287.004 l
386.425 286.812 385.894 286.717 385.483 286.717  c
384.894 286.717 384.420 286.938 384.062 287.382  c
383.705 287.825 383.526 288.416 383.526 289.154  c
383.526 289.869 383.710 290.447 384.077 290.889  c
384.444 291.330 384.925 291.551 385.519 291.551  c
386.046 291.551 386.589 291.416 387.147 291.146  c
387.147 292.143 l
386.401 292.369 385.757 292.482 385.214 292.482  c
h
392.157 291.527 m
391.466 292.164 390.800 292.482 390.159 292.482  c
389.632 292.482 389.194 292.317 388.847 291.987  c
388.499 291.657 388.325 291.240 388.325 290.736  c
388.325 290.041 388.617 289.507 389.201 289.134  c
389.785 288.761 390.622 288.574 391.712 288.574  c
391.987 288.574 l
391.987 287.807 l
391.987 287.068 391.608 286.699 390.851 286.699  c
390.241 286.699 389.583 286.887 388.876 287.262  c
388.876 286.307 l
389.653 285.990 390.382 285.832 391.062 285.832  c
391.772 285.832 392.297 285.992 392.635 286.312  c
392.973 286.633 393.142 287.131 393.142 287.807  c
393.142 290.689 l
393.142 291.350 393.345 291.680 393.751 291.680  c
393.802 291.680 393.876 291.672 393.974 291.656  c
394.056 292.295 l
393.794 292.420 393.505 292.482 393.188 292.482  c
392.649 292.482 392.306 292.164 392.157 291.527  c
h
391.987 290.900 m
391.987 289.254 l
391.601 289.242 l
390.968 289.242 390.456 289.362 390.065 289.603  c
389.675 289.843 389.479 290.158 389.479 290.549  c
389.479 290.826 389.577 291.061 389.772 291.252  c
389.968 291.443 390.206 291.539 390.487 291.539  c
390.968 291.539 391.468 291.326 391.987 290.900  c
h
395.503 292.336 m
395.503 283.084 l
396.657 283.084 l
396.657 292.336 l
h
f
newpath
361.539 306.469 m
361.539 297.797 l
362.746 297.797 l
367.111 304.494 l
367.111 297.797 l
368.166 297.797 l
368.166 306.469 l
366.965 306.469 l
362.594 299.771 l
362.594 306.469 l
h
375.104 306.264 m
374.330 306.498 373.668 306.615 373.117 306.615  c
372.180 306.615 371.415 306.304 370.823 305.681  c
370.231 305.058 369.936 304.250 369.936 303.258  c
369.936 302.293 370.196 301.502 370.718 300.885  c
371.239 300.268 371.906 299.959 372.719 299.959  c
373.488 299.959 374.083 300.232 374.503 300.779  c
374.923 301.326 375.133 302.104 375.133 303.111  c
375.127 303.469 l
371.113 303.469 l
371.281 304.980 372.021 305.736 373.334 305.736  c
373.814 305.736 374.404 305.607 375.104 305.350  c
h
371.166 302.602 m
373.973 302.602 l
373.973 301.418 373.531 300.826 372.648 300.826  c
371.762 300.826 371.268 301.418 371.166 302.602  c
h
379.035 306.615 m
378.449 306.615 377.992 306.447 377.664 306.111  c
377.336 305.775 377.172 305.309 377.172 304.711  c
377.172 300.973 l
376.375 300.973 l
376.375 300.105 l
377.172 300.105 l
377.172 298.951 l
378.326 298.840 l
378.326 300.105 l
379.990 300.105 l
379.990 300.973 l
378.326 300.973 l
378.326 304.500 l
378.326 305.332 378.686 305.748 379.404 305.748  c
379.557 305.748 379.742 305.723 379.961 305.672  c
379.961 306.469 l
379.605 306.566 379.297 306.615 379.035 306.615  c
h
382.352 306.469 m
380.529 300.105 l
381.660 300.105 l
383.055 305.033 l
384.561 300.105 l
385.715 300.105 l
387.033 305.033 l
388.633 300.105 l
389.623 300.105 l
387.549 306.469 l
386.389 306.469 l
385.041 301.541 l
383.518 306.469 l
h
393.350 306.615 m
392.439 306.615 391.713 306.313 391.170 305.710  c
390.627 305.106 390.355 304.299 390.355 303.287  c
390.355 302.264 390.628 301.454 391.173 300.858  c
391.718 300.263 392.457 299.965 393.391 299.965  c
394.324 299.965 395.063 300.263 395.608 300.858  c
396.153 301.454 396.426 302.260 396.426 303.275  c
396.426 304.314 396.152 305.131 395.605 305.725  c
395.059 306.318 394.307 306.615 393.350 306.615  c
h
393.367 305.748 m
394.590 305.748 395.201 304.924 395.201 303.275  c
395.201 301.646 394.598 300.832 393.391 300.832  c
392.188 300.832 391.586 301.650 391.586 303.287  c
391.586 304.928 392.180 305.748 393.367 305.748  c
h
398.230 306.469 m
398.230 300.105 l
399.385 300.105 l
399.385 301.301 l
399.842 300.410 400.506 299.965 401.377 299.965  c
401.494 299.965 401.617 299.975 401.746 299.994  c
401.746 301.072 l
401.547 301.006 401.371 300.973 401.219 300.973  c
400.488 300.973 399.877 301.406 399.385 302.273  c
399.385 306.469 l
h
403.141 306.469 m
403.141 297.217 l
404.295 297.217 l
404.295 303.193 l
406.990 300.105 l
408.232 300.105 l
405.660 303.076 l
408.766 306.469 l
407.289 306.469 l
404.295 303.205 l
404.295 306.469 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
219.000 315.000 m
415.000 315.000 l
415.000 403.000 l
219.000 403.000 l
219.000 315.000 l
h
S
2 J
10.0000 M
6.00000 w
0 J
1.45000 M
newpath
287.000 243.827 m
287.000 327.582 l
S
1.00000 w
newpath
235.889 283.150 m
235.889 275.398 l
232.812 275.398 l
232.812 274.478 l
240.195 274.478 l
240.195 275.398 l
237.119 275.398 l
237.119 283.150 l
h
241.449 283.150 m
241.449 276.787 l
242.604 276.787 l
242.604 277.982 l
243.061 277.091 243.725 276.646 244.596 276.646  c
244.713 276.646 244.836 276.656 244.965 276.675  c
244.965 277.754 l
244.766 277.687 244.590 277.654 244.438 277.654  c
243.707 277.654 243.096 278.087 242.604 278.955  c
242.604 283.150 l
h
250.338 283.150 m
250.338 281.955 l
249.725 282.849 248.980 283.296 248.105 283.296  c
247.551 283.296 247.109 283.122 246.781 282.772  c
246.453 282.422 246.289 281.951 246.289 281.357  c
246.289 276.787 l
247.443 276.787 l
247.443 280.982 l
247.443 281.459 247.513 281.797 247.651 281.999  c
247.790 282.200 248.021 282.300 248.346 282.300  c
249.049 282.300 249.713 281.837 250.338 280.912  c
250.338 276.787 l
251.492 276.787 l
251.492 283.150 l
h
255.494 283.296 m
254.967 283.296 254.326 283.173 253.572 282.927  c
253.572 281.867 l
254.326 282.242 254.982 282.429 255.541 282.429  c
255.873 282.429 256.148 282.339 256.367 282.160  c
256.586 281.980 256.695 281.755 256.695 281.486  c
256.695 281.091 256.389 280.765 255.775 280.507  c
255.102 280.220 l
254.105 279.806 253.607 279.211 253.607 278.433  c
253.607 277.879 253.804 277.442 254.196 277.124  c
254.589 276.805 255.127 276.646 255.811 276.646  c
256.166 276.646 256.605 276.695 257.129 276.793  c
257.369 276.839 l
257.369 277.800 l
256.725 277.609 256.213 277.513 255.834 277.513  c
255.092 277.513 254.721 277.783 254.721 278.322  c
254.721 278.670 255.002 278.962 255.564 279.201  c
256.121 279.435 l
256.750 279.701 257.195 279.981 257.457 280.276  c
257.719 280.571 257.850 280.939 257.850 281.380  c
257.850 281.939 257.629 282.398 257.188 282.757  c
256.746 283.117 256.182 283.296 255.494 283.296  c
h
261.834 283.296 m
261.248 283.296 260.791 283.129 260.463 282.793  c
260.135 282.457 259.971 281.990 259.971 281.392  c
259.971 277.654 l
259.174 277.654 l
259.174 276.787 l
259.971 276.787 l
259.971 275.632 l
261.125 275.521 l
261.125 276.787 l
262.789 276.787 l
262.789 277.654 l
261.125 277.654 l
261.125 281.181 l
261.125 282.013 261.484 282.429 262.203 282.429  c
262.355 282.429 262.541 282.404 262.760 282.353  c
262.760 283.150 l
262.404 283.248 262.096 283.296 261.834 283.296  c
h
269.076 282.945 m
268.303 283.179 267.641 283.296 267.090 283.296  c
266.152 283.296 265.388 282.985 264.796 282.362  c
264.204 281.739 263.908 280.931 263.908 279.939  c
263.908 278.974 264.169 278.183 264.690 277.566  c
265.212 276.949 265.879 276.640 266.691 276.640  c
267.461 276.640 268.056 276.914 268.476 277.461  c
268.896 278.007 269.105 278.785 269.105 279.793  c
269.100 280.150 l
265.086 280.150 l
265.254 281.662 265.994 282.418 267.307 282.418  c
267.787 282.418 268.377 282.289 269.076 282.031  c
h
265.139 279.283 m
267.945 279.283 l
267.945 278.099 267.504 277.507 266.621 277.507  c
265.734 277.507 265.240 278.099 265.139 279.283  c
h
275.182 283.150 m
275.182 281.955 l
274.713 282.849 274.006 283.296 273.061 283.296  c
272.295 283.296 271.692 283.017 271.253 282.459  c
270.813 281.900 270.594 281.136 270.594 280.168  c
270.594 279.109 270.843 278.257 271.341 277.613  c
271.839 276.968 272.494 276.646 273.307 276.646  c
274.061 276.646 274.686 276.935 275.182 277.513  c
275.182 273.898 l
276.342 273.898 l
276.342 283.150 l
h
275.182 278.304 m
274.584 277.777 274.018 277.513 273.482 277.513  c
272.377 277.513 271.824 278.359 271.824 280.050  c
271.824 281.539 272.316 282.283 273.301 282.283  c
273.941 282.283 274.568 281.933 275.182 281.234  c
h
f
newpath
235.895 297.283 m
235.895 289.531 l
232.818 289.531 l
232.818 288.611 l
240.201 288.611 l
240.201 289.531 l
237.125 289.531 l
237.125 297.283 l
h
241.420 297.283 m
241.420 288.611 l
242.650 288.611 l
242.650 296.363 l
246.553 296.363 l
246.553 297.283 l
h
249.518 297.500 m
248.936 297.500 248.191 297.373 247.285 297.119  c
247.285 295.900 l
248.262 296.353 249.064 296.580 249.693 296.580  c
250.178 296.580 250.567 296.453 250.862 296.199  c
251.157 295.945 251.305 295.611 251.305 295.197  c
251.305 294.857 251.208 294.568 251.015 294.330  c
250.821 294.091 250.465 293.826 249.945 293.533  c
249.348 293.187 l
248.609 292.765 248.089 292.368 247.786 291.995  c
247.483 291.622 247.332 291.187 247.332 290.691  c
247.332 290.023 247.574 289.473 248.059 289.042  c
248.543 288.610 249.160 288.394 249.910 288.394  c
250.578 288.394 251.283 288.505 252.025 288.728  c
252.025 289.853 l
251.111 289.494 250.430 289.314 249.980 289.314  c
249.555 289.314 249.203 289.427 248.926 289.654  c
248.648 289.880 248.510 290.166 248.510 290.509  c
248.510 290.798 248.611 291.054 248.814 291.277  c
249.018 291.500 249.389 291.765 249.928 292.074  c
250.549 292.425 l
251.299 292.851 251.822 293.254 252.119 293.632  c
252.416 294.011 252.564 294.466 252.564 294.998  c
252.564 295.752 252.286 296.357 251.729 296.814  c
251.173 297.271 250.436 297.500 249.518 297.500  c
h
258.078 297.283 m
258.078 288.611 l
259.309 288.611 l
259.309 296.363 l
263.211 296.363 l
263.211 297.283 l
h
264.512 297.283 m
264.512 290.920 l
265.666 290.920 l
265.666 297.283 l
h
264.512 289.765 m
264.512 288.611 l
265.666 288.611 l
265.666 289.765 l
h
267.980 297.283 m
267.980 290.920 l
269.135 290.920 l
269.135 292.115 l
269.744 291.224 270.490 290.779 271.373 290.779  c
271.924 290.779 272.363 290.954 272.691 291.303  c
273.020 291.653 273.184 292.123 273.184 292.712  c
273.184 297.283 l
272.029 297.283 l
272.029 293.087 l
272.029 292.615 271.960 292.278 271.821 292.077  c
271.683 291.876 271.453 291.775 271.133 291.775  c
270.426 291.775 269.760 292.238 269.135 293.164  c
269.135 297.283 l
h
275.428 297.283 m
275.428 288.031 l
276.582 288.031 l
276.582 294.007 l
279.277 290.920 l
280.520 290.920 l
277.947 293.890 l
281.053 297.283 l
279.576 297.283 l
276.582 294.019 l
276.582 297.283 l
h
f
6.00000 w
1.00000 w
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
